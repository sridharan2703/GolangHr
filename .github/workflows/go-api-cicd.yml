name: Deploy Go App to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21
          cache: true

      - name: Generate version information
        id: version
        run: |
          if git describe --tags --exact-match 2>/dev/null; then
            VERSION=$(git describe --tags --exact-match)
          else
            VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "v0.0.0-$(git rev-parse --short HEAD)")
          fi
          
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Version: $VERSION"
          echo "üîó Commit: $COMMIT_HASH"
          echo "üìÖ Build Date: $BUILD_DATE"

      - name: Build Go app
        run: |
          go mod tidy
          go build -o app main.go
          
          # Verify binary was created
          ls -la app
          file app
          
          # Create version info file
          cat > version.json << EOF
          {
            "version": "${{ steps.version.outputs.VERSION }}",
            "commit": "${{ steps.version.outputs.COMMIT_HASH }}",
            "build_date": "${{ steps.version.outputs.BUILD_DATE }}",
            "branch": "${{ steps.version.outputs.BRANCH }}"
          }
          EOF

      - name: Setup SSH key
        run: |
          if [ -z "${{ secrets.DEPLOY_KEY }}" ]; then
            echo "‚ùå DEPLOY_KEY secret is not set"
            exit 1
          fi
          
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 20.197.1.81 >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_rsa Admin_wf@20.197.1.81 "echo '‚úÖ SSH connection works'"

      - name: Stop existing application
        run: |
          ssh -i ~/.ssh/id_rsa Admin_wf@20.197.1.81 << 'EOF'
          echo "=== Stopping existing application ==="
          
          cd /home/Admin_wf/test2/WFHR || exit 1
          
          # Stop processes using port 5000
          PORT_PID=$(lsof -ti:5000 2>/dev/null || echo "")
          if [ -n "$PORT_PID" ]; then
            echo "Killing processes using port 5000: $PORT_PID"
            kill -TERM $PORT_PID 2>/dev/null || true
            sleep 3
            kill -KILL $PORT_PID 2>/dev/null || true
            sleep 2
          else
            echo "No processes found using port 5000"
          fi
          
          # Stop app processes by path
          if pgrep -f "/home/Admin_wf/test2/WFHR/app" > /dev/null 2>&1; then
            echo "Stopping app processes..."
            pkill -TERM -f "/home/Admin_wf/test2/WFHR/app" || true
            sleep 3
            pkill -KILL -f "/home/Admin_wf/test2/WFHR/app" 2>/dev/null || true
            sleep 2
          fi
          
          # Backup existing binary
          if [ -f "./app" ]; then
            echo "Backing up existing binary..."
            mv ./app ./app.backup.$(date +%s) 2>/dev/null || rm -f ./app
          fi
          
          # Verify port is free
          if lsof -ti:5000 > /dev/null 2>&1; then
            echo "‚ùå Port 5000 still in use after cleanup"
            lsof -i:5000
            exit 1
          else
            echo "‚úÖ Port 5000 is now free"
          fi
          
          echo "‚úÖ Application stopped successfully"
          EOF

      - name: Deploy binary and files
        run: |
          echo "üöÄ Deploying version ${{ steps.version.outputs.VERSION }}"
          
          # First, copy the binary specifically
          echo "Copying binary..."
          scp -i ~/.ssh/id_rsa app Admin_wf@20.197.1.81:/home/Admin_wf/test2/WFHR/app
          
          # Then sync other files
          echo "Syncing other files..."
          rsync -avz --delete \
            --exclude ".git/" \
            --exclude ".github/" \
            --exclude "*.log" \
            --exclude "*.backup.*" \
            --exclude "README.md" \
            --exclude "go.sum" \
            --exclude "app" \
            --progress \
            -e "ssh -i ~/.ssh/id_rsa" \
            ./ Admin_wf@20.197.1.81:/home/Admin_wf/test2/WFHR/
          
          # Verify binary exists on server
          ssh -i ~/.ssh/id_rsa Admin_wf@20.197.1.81 \
            "cd /home/Admin_wf/test2/WFHR && ls -la app && file app"

      - name: Start application
        run: |
          ssh -i ~/.ssh/id_rsa Admin_wf@20.197.1.81 << 'EOF'
          set -e
          echo "=== Starting Application: ${{ steps.version.outputs.VERSION }} ==="
          
          cd /home/Admin_wf/test2/WFHR
          echo "Working directory: $(pwd)"
          
          # Log deployment
          echo "$(date): Deploying version ${{ steps.version.outputs.VERSION }} (commit: ${{ steps.version.outputs.COMMIT_HASH }})" >> deployment.log
          
          # Verify binary exists and set permissions
          if [ ! -f "./app" ]; then
            echo "‚ùå Binary file ./app not found"
            ls -la
            exit 1
          fi
          
          chmod +x ./app
          echo "‚úÖ Binary permissions set"
          
          # Create startup script with version info
          cat > start_app.sh << 'SCRIPT'
          #!/bin/bash
          echo "=== Application Startup ==="
          echo "Version: ${{ steps.version.outputs.VERSION }}"
          echo "Commit: ${{ steps.version.outputs.COMMIT_HASH }}"
          echo "Build Date: ${{ steps.version.outputs.BUILD_DATE }}"
          echo "Started: $(date)"
          echo "=========================="
          ./app
          SCRIPT
          chmod +x start_app.sh
          
          echo "Starting application version ${{ steps.version.outputs.VERSION }}..."
          nohup ./start_app.sh > app.log 2>&1 &
          APP_PID=$!
          echo "Application started with PID: $APP_PID"
          
          # Wait for startup
          echo "Waiting for application to start..."
          sleep 8
          
          # Check if process is running
          if ps -p $APP_PID > /dev/null 2>&1; then
            echo "‚úÖ Application process is running (PID: $APP_PID)"
            
            # Check if listening on port
            sleep 3
            if lsof -i:5000 > /dev/null 2>&1; then
              echo "‚úÖ Application is listening on port 5000"
              lsof -i:5000
              echo "$(date): Successfully deployed version ${{ steps.version.outputs.VERSION }}" >> deployment.log
            else
              echo "‚ö†Ô∏è Application running but not listening on port 5000 yet"
              echo "Checking logs..."
              tail -10 app.log
            fi
          else
            echo "‚ùå Application failed to start or crashed"
            echo "=== Application Log ==="
            cat app.log 2>/dev/null || echo "No log file found"
            echo "$(date): Failed to deploy version ${{ steps.version.outputs.VERSION }}" >> deployment.log
            exit 1
          fi
          
          echo "=== Recent Log Entries ==="
          tail -5 app.log 2>/dev/null || echo "No logs available"
          
          echo "=== Deployment Completed: ${{ steps.version.outputs.VERSION }} ==="
          EOF

      - name: Health check
        run: |
          echo "=== Performing connectivity check ==="
          sleep 5
          
          if command -v curl >/dev/null 2>&1; then
            if curl -f --connect-timeout 10 --max-time 30 \
               http://20.197.1.81:5000 >/dev/null 2>&1; then
              echo "‚úÖ Application is responding"
            else
              echo "‚ö†Ô∏è Application may still be starting"
            fi
          fi